import os
import requests
import datetime
from dateutil import parser

# Environment variables
TENANT_ID = os.environ['TENANT_ID']
CLIENT_ID = os.environ['CLIENT_ID']
CLIENT_SECRET = os.environ['CLIENT_SECRET']
LOGIC_APP_URL = os.environ['LOGIC_APP_URL']
RECIPIENT_EMAIL = os.environ['RECIPIENT_EMAIL']

def get_access_token():
    url = f"https://login.microsoftonline.com/{TENANT_ID}/oauth2/v2.0/token"
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    data = {
        "client_id": CLIENT_ID,
        "scope": "https://graph.microsoft.com/.default",
        "client_secret": CLIENT_SECRET,
        "grant_type": "client_credentials"
    }
    response = requests.post(url, headers=headers, data=data)
    response.raise_for_status()
    return response.json()["access_token"]

def get_applications(token):
    url = "https://graph.microsoft.com/v1.0/applications?$top=999"
    headers = {"Authorization": f"Bearer {token}"}
    apps = []
    while url:
        res = requests.get(url, headers=headers).json()
        apps.extend(res.get("value", []))
        url = res.get("@odata.nextLink")
    return apps

def get_owners(token, app_id):
    url = f"https://graph.microsoft.com/v1.0/applications/{app_id}/owners"
    headers = {"Authorization": f"Bearer {token}"}
    res = requests.get(url, headers=headers).json()
    return [o.get("userPrincipalName", "Unknown") for o in res.get("value", [])]

def main():
    token = get_access_token()
    apps = get_applications(token)
    today = datetime.datetime.now(datetime.timezone.utc)
    threshold = today + datetime.timedelta(days=30)
    expiring = []

    for app in apps:
        app_name = app.get("displayName")
        client_id = app.get("appId")
        app_id = app.get("id")
        owners = get_owners(token, app_id)
        secrets = app.get("passwordCredentials", [])
        for secret in secrets:
            expiry = parser.isoparse(secret["endDateTime"])
            if today < expiry <= threshold:
                expiring.append({
                    "AppName": app_name,
                    "ClientId": client_id,
                    "Owner": ", ".join(owners) or "N/A",
                    "Expiry": expiry.strftime("%Y-%m-%d %H:%M:%S UTC")
                })

    if not expiring:
        print("✅ No secrets expiring within the next 30 days.")
        return

    # Construct HTML
    rows = "".join(
        f"<tr><td>{e['AppName']}</td><td>{e['ClientId']}</td><td>{e['Owner']}</td><td>{e['Expiry']}</td></tr>"
        for e in expiring
    )
    html_body = f"""
    <html>
    <body>
        <h3>⚠️ App Registration Secrets Expiring Within 30 Days</h3>
        <table border="1" cellpadding="5" cellspacing="0" style="border-collapse: collapse;">
            <tr><th>App Name</th><th>Client ID</th><th>Owner(s)</th><th>Expiry Date</th></tr>
            {rows}
        </table>
    </body>
    </html>
    """

    # Call Logic App
    payload = {
        "subject": "⚠️ Azure App Registration Secrets Expiring Soon",
        "htmlBody": html_body,
        "to": RECIPIENT_EMAIL
    }
    headers = {"Content-Type": "application/json"}
    response = requests.post(LOGIC_APP_URL, headers=headers, json=payload)

    if response.status_code in [200, 202]:
        print("✅ Email sent successfully via Logic App.")
    else:
        print(f"❌ Failed to send email: {response.status_code} - {response.text}")

if __name__ == "__main__":
    main()
