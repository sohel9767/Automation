import requests
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from datetime import datetime, timedelta
from msal import ConfidentialClientApplication

# Azure AD App credentials
CLIENT_ID = 'your-client-id'
CLIENT_SECRET = 'your-client-secret'
TENANT_ID = 'your-tenant-id'

# Email config
SMTP_SERVER = 'smtp.yourdomain.com'
SMTP_PORT = 587
EMAIL_FROM = 'sender@yourdomain.com'
EMAIL_TO = 'recipient@yourdomain.com'
EMAIL_SUBJECT = 'Azure App Registration Secrets Expiring Soon'

# Authenticate with Microsoft Graph
AUTHORITY = f"https://login.microsoftonline.com/{TENANT_ID}"
SCOPE = ['https://graph.microsoft.com/.default']

app = ConfidentialClientApplication(CLIENT_ID, authority=AUTHORITY, client_credential=CLIENT_SECRET)
token_response = app.acquire_token_for_client(scopes=SCOPE)

if 'access_token' not in token_response:
    raise Exception("Could not obtain access token")

access_token = token_response['access_token']
headers = {'Authorization': f'Bearer {access_token}'}

# Get all App Registrations
apps = []
url = "https://graph.microsoft.com/v1.0/applications?$select=displayName,passwordCredentials"
while url:
    response = requests.get(url, headers=headers)
    result = response.json()
    apps.extend(result.get('value', []))
    url = result.get('@odata.nextLink')

# Check for secrets expiring in the next 30 days
expiry_threshold = datetime.utcnow() + timedelta(days=30)
expiring_secrets = []

for app in apps:
    app_name = app.get('displayName', 'Unknown')
    for secret in app.get('passwordCredentials', []):
        end_date_str = secret.get('endDateTime')
        if end_date_str:
            end_date = datetime.strptime(end_date_str, '%Y-%m-%dT%H:%M:%SZ')
            if end_date < expiry_threshold:
                expiring_secrets.append({
                    'App Name': app_name,
                    'Secret Display Name': secret.get('displayName', 'N/A'),
                    'Expires On': end_date.strftime('%Y-%m-%d')
                })

# Send email if any secrets are expiring
if expiring_secrets:
    html_table = "<table border='1'><tr><th>App Name</th><th>Secret Display Name</th><th>Expires On</th></tr>"
    for item in expiring_secrets:
        html_table += f"<tr><td>{item['App Name']}</td><td>{item['Secret Display Name']}</td><td>{item['Expires On']}</td></tr>"
    html_table += "</table>"

    # Create email message
    msg = MIMEMultipart('alternative')
    msg['Subject'] = EMAIL_SUBJECT
    msg['From'] = EMAIL_FROM
    msg['To'] = EMAIL_TO
    msg.attach(MIMEText(f"<p>The following secrets are expiring within 30 days:</p>{html_table}", 'html'))

    # Send email
    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
        server.starttls()
        server.login(EMAIL_FROM, 'your-email-password')  # Or use app password/token
        server.sendmail(EMAIL_FROM, EMAIL_TO, msg.as_string())

    print("Email sent.")
else:
    print("No expiring secrets found.")
